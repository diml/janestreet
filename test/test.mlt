[%%org {|
#+TITLE: How to Use Toplevel Files

What follows are some simple examples demonstrating how to write a toplevel file. You can
think of it as being just like a Utop session, consisting of statements that produce some
output and, in ~[%%expect]~ blocks, the correct output itself.

If you'd like to add markup explaining parts of your toplevel session (like in this very
file), you can embed it in an org-mode block like so:

#+BEGIN_SRC ocaml
  [%%org {x|
    * This is an org-mode header
  |x}];;
#+END_SRC

Everything within the org block will be ignored by the compiler as if it were a comment.
For that behavior to be enabled you need to add the ~ppx_org~ extension to the project.
Just add it to your jbuild like so:

#+BEGIN_SRC
  (toplevel_expect_tests ((libraries (ppx_org))))
#+END_SRC

To get nice syntax highlighting and keybindings for these embedded org-blocks, you'll want
to enable polymode.

** Enabling Emacs polymode to add org-mode support to .mlt files

1. Add the following lines to your ~/.emacs:

  #+BEGIN_SRC lisp
  (add-to-list 'load-path "/j/igm/app/emacs/prod/jane-elisp/elisp/contrib/polymode")
  (add-to-list 'load-path "/j/igm/app/emacs/prod/jane-elisp/elisp/contrib/polymode/modes")
  (add-to-list 'load-path "/j/igm/app/emacs/dev/jane-elisp/elisp/polymode-modes")
  (require 'poly-caml)
  (add-to-list 'auto-mode-alist '("\\.mlt\\'" . poly-caml-mode))
  #+END_SRC

2. Test that it works by running:

  #+BEGIN_SRC bash
  emacs lib/toplevel_expect_test/test/test.mlt
  #+END_SRC

If you move your cursor to the first or last line of an org block, you should notice that
there's a little alert on the info bar below the buffer saying what kind of buffer you're
in:

[[./polymode-screenshot.png]]

All the key bindings and stuff should work for each mode. And if you run
~[C-h v major-mode RET]~ you should see what mode Emacs thinks you're in.

** Publishing toplevel files to the wiki

Wikipub understands .mlt files and can publish them to the wiki. This is useful if you
want to write documentation that compiles: You write your toplevel file, letting the
compiler ensure that your ~expect~ tests pass, and then publish those examples along with
commentary in ~org~ blocks, in a literate style.

To get this working, all you have to do is tell Wikipub to publish the directory that
includes your *.mlt file, with one of the following stanzas in your jbuild. Both work
because .mlt is now part of Wikipub's ~Standard_formats~:

#+BEGIN_SRC
  (wikipub (Files (test.mlt)))
  ;(wikipub Standard_formats) also works
#+END_SRC

** Onto the examples!
|}];;

[%%org "*** Errors"];;
let x = 1 + 'e';;
[%%expect{|
Line _, characters 12-15:
Error: This expression has type char but an expression was expected of type
         int
|}];;

[%%org "*** Printing"];;
print_string "foo\n";;
print_string "blah";;
[%%expect{|
foo
blah
|}];;

[%%org {|
Now we'll go into verbose mode. We add a ~#verbose true~ declaration on its own line.
#+BEGIN_SRC ocaml
#verbose true;;
#+END_SRC
|}];;

#verbose true;;

[%%org {|
Rather than explicitly having to output something, every statement's return value will be
now be expected in the expect block that follows.
|}];;

[%%org "*** Printing with verbose turned on"];;
print_string "foo"
[%%expect{|
- : unit = ()
foo
|}];;

[%%org "*** Value printing"];;
open Base
let x = Sexp.List [Atom "abc"; Atom "42"]
[%%expect{|
val x : Sexp.t = (abc 42)
|}];;
